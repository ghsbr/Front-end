"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
exports.__esModule = true;
var got_1 = require("got");
var cheerio = require("cheerio");
var utils_1 = require("./utils");
/**
 * Ritorna le città più inquinate dell'anno scorso, 50 alla volta.
 * @param page Pagina da cui far partire il generatore asincorno.
 */
function lastYearMostPollutedCities(page) {
    if (page === void 0) { page = 1; }
    return __asyncGenerator(this, arguments, function lastYearMostPollutedCities_1() {
        var results, _a, _b, err_1;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _c.trys.push([0, 6, , 8]);
                    _b = (_a = JSON).parse;
                    return [4 /*yield*/, __await(got_1["default"].get("https://website-api.airvisual.com/v1/analytics/rankings/world-cities-2018?continent=&country=&state=&page=" + page + "&perPage=50", {
                            headers: {
                                accept: "application/json, text/plain, */*",
                                "accept-encoding": "gzip, deflate, br",
                                "accept-language": "en-US;q=0.8,en;q=0.7",
                                origin: "https://www.airvisual.com",
                                referer: "https://www.airvisual.com/world-most-polluted-cities",
                                "sec-fetch-mode": "cors",
                                "sec-fetch-site": "same-site",
                                "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36"
                            }
                        }))];
                case 1:
                    results = _b.apply(_a, [(_c.sent()).body]);
                    if (!(results.length === 0)) return [3 /*break*/, 3];
                    return [4 /*yield*/, __await([])];
                case 2: return [2 /*return*/, _c.sent()];
                case 3: return [4 /*yield*/, __await(results)];
                case 4: return [4 /*yield*/, _c.sent()];
                case 5:
                    _c.sent();
                    return [3 /*break*/, 8];
                case 6:
                    err_1 = _c.sent();
                    console.error("==> Error: " + err_1.message);
                    return [4 /*yield*/, __await(null)];
                case 7: return [2 /*return*/, _c.sent()];
                case 8: return [2 /*return*/];
            }
        });
    });
}
exports.lastYearMostPollutedCities = lastYearMostPollutedCities;
/**
 * Ritorna le città più inquinate dell'anno scorso (si aggiorna ogni anno
 * circa).
 */
function lastYearMostPollutedAllCities() {
    return __awaiter(this, void 0, void 0, function () {
        var _a, _b, err_2;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _c.trys.push([0, 2, , 3]);
                    _b = (_a = JSON).parse;
                    return [4 /*yield*/, got_1["default"].get("https://website-api.airvisual.com/v1/analytics/rankings/world-cities-2018/filters", {
                            headers: {
                                accept: "application/json, text/plain, */*",
                                "accept-encoding": "gzip, deflate, br",
                                "accept-language": "en-US;q=0.8,en;q=0.7",
                                origin: "https://www.airvisual.com",
                                referer: "https://www.airvisual.com/world-most-polluted-cities",
                                "sec-fetch-mode": "cors",
                                "sec-fetch-site": "same-site",
                                "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36"
                            }
                        })];
                case 1: return [2 /*return*/, _b.apply(_a, [(_c.sent()).body])];
                case 2:
                    err_2 = _c.sent();
                    console.error("==> Error: " + err_2.message);
                    return [2 /*return*/, null];
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.lastYearMostPollutedAllCities = lastYearMostPollutedAllCities;
/**
 * Ritorna gli stati più inquinati dell'anno scorso (si aggiorna ogni anno
 * circa).
 */
function lastYearMostPollutedCountries() {
    return __awaiter(this, void 0, void 0, function () {
        var body, $_1, err_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, got_1["default"].get("https://www.airvisual.com/world-most-polluted-countries", {
                            headers: {
                                accept: "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
                                "accept-encoding": "gzip, deflate, br",
                                "accept-language": "en-US;q=0.8,en;q=0.7",
                                "cache-control": "max-age=0",
                                // cookie:
                                //   'user_preferences={"coordinates":{"latitude":45.5037,"longitude":11.412},"timezone":"Europe/Rome","country":{"id":"wS4BTBZsKwcpavTvr","name":"Italy"},"city":{"id":"5bc8219541fdcdf1939db899","name":"Montecchio Maggiore-Alte Ceccato"},"units":{"distance":"kilometer","temperature":"celsius"},"AQI":"US"}; AWSALB=ZDGY1PMgX5AQF/arKTbT+hLNmRHm7gu8ZfCk5d2rmkJLvLDupuZs96EdLY+xKaOuWyv45FgMkFb4QhimnO+OUEL07O3flMR3uUsZscpq9YfiBYIg2CBt5fKxEuhC',
                                "sec-fetch-mode": "navigate",
                                "sec-fetch-site": "same-origin",
                                "sec-fetch-user": "?1",
                                "upgrade-insecure-requests": "1",
                                "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36"
                            }
                        })];
                case 1:
                    body = (_a.sent()).body;
                    $_1 = cheerio.load(body);
                    return [2 /*return*/, Array.from($_1("tr.mat-row")).map(function (country) {
                            var _a;
                            var cols = Array.from($_1(country).find("td")).map(function (x) { return $_1(x); });
                            return {
                                position: utils_1.strNullIfEmpty(cols[0].text().trim()),
                                country: {
                                    flag: (_a = cols[1].find("img").attr("src"), (_a !== null && _a !== void 0 ? _a : null)),
                                    name: utils_1.strNullIfEmpty(cols[1].text().trim())
                                },
                                average: utils_1.strNullIfEmpty(cols[2].text()),
                                population: utils_1.strNullIfEmpty(cols[3].text())
                            };
                        })];
                case 2:
                    err_3 = _a.sent();
                    console.error("==> Error: " + err_3.message);
                    return [2 /*return*/, null];
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.lastYearMostPollutedCountries = lastYearMostPollutedCountries;
/**
 * Generatore asincrono che ad ogni iterazione restituisce 50 città inquinate.
 * @param page Pagina iniziale da cui far partire il generatore asincrono.
 */
function rankings(page) {
    if (page === void 0) { page = 1; }
    return __asyncGenerator(this, arguments, function rankings_1() {
        var results, _a, _b, err_4;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _c.trys.push([0, 6, , 9]);
                    _b = (_a = JSON).parse;
                    return [4 /*yield*/, __await(got_1["default"].get("https://website-api.airvisual.com/v1/countries/rankings?perPage=50&page=" + page++ + "&display=full&units.temperature=celsius&units.distance=kilometer&AQI=US&language=en", {
                            headers: {
                                accept: "application/json, text/plain, */*",
                                "accept-encoding": "gzip, deflate, br",
                                "accept-language": "en-US;q=0.8,en;q=0.7",
                                "content-type": "application/json",
                                // cookie:
                                //   'user_preferences={"coordinates":{"latitude":45.5037,"longitude":11.412},"timezone":"Europe/Rome","country":{"id":"wS4BTBZsKwcpavTvr","name":"Italy"},"city":{"id":"5bc8219541fdcdf1939db899","name":"Montecchio Maggiore-Alte Ceccato"},"units":{"distance":"kilometer","temperature":"celsius"},"AQI":"US"}',
                                origin: "https://www.airvisual.com",
                                referer: "https://www.airvisual.com/world-air-quality-ranking",
                                "sec-fetch-mode": "cors",
                                "sec-fetch-site": "same-site",
                                "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36"
                            }
                        }))];
                case 1:
                    results = _b.apply(_a, [(_c.sent()).body]);
                    if (!(results.length === 0)) return [3 /*break*/, 3];
                    return [4 /*yield*/, __await([])];
                case 2: return [2 /*return*/, _c.sent()];
                case 3: return [4 /*yield*/, __await(results)];
                case 4: return [4 /*yield*/, _c.sent()];
                case 5:
                    _c.sent();
                    return [3 /*break*/, 9];
                case 6:
                    err_4 = _c.sent();
                    console.error("==> Error: " + err_4.message);
                    return [4 /*yield*/, __await(null)];
                case 7: return [4 /*yield*/, _c.sent()];
                case 8:
                    _c.sent();
                    return [3 /*break*/, 9];
                case 9: return [2 /*return*/];
            }
        });
    });
}
exports.rankings = rankings;
/**
 * Ritorna le 3 città più inquinate del paese.
 * @param countryId ID del paese.
 */
function top3ByCountry(countryId) {
    if (countryId === void 0) { countryId = "wS4BTBZsKwcpavTvr"; }
    return __awaiter(this, void 0, void 0, function () {
        var _a, _b, err_5;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _c.trys.push([0, 2, , 3]);
                    _b = (_a = JSON).parse;
                    return [4 /*yield*/, got_1["default"].get("https://website-api.airvisual.com/v1/cities/top3/by/countryID/" + countryId + "?units.temperature=celsius&units.distance=kilometer&AQI=US&language=en", {
                            headers: {
                                accept: "application/json, text/plain, */*",
                                "accept-encoding": "gzip, deflate, br",
                                "accept-language": "en-US;q=0.8,en;q=0.7",
                                origin: "https://www.airvisual.com",
                                referer: "https://www.airvisual.com/",
                                "sec-fetch-mode": "cors",
                                "sec-fetch-site": "same-site",
                                "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36"
                            }
                        })];
                case 1: return [2 /*return*/, _b.apply(_a, [(_c.sent()).body])];
                case 2:
                    err_5 = _c.sent();
                    console.error("==> Error: " + err_5.message);
                    return [2 /*return*/, null];
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.top3ByCountry = top3ByCountry;
/**
 * Ritorna misurazioni effettuate sulla città, aggiornate in tempo reale.
 * @param cityId ID della città.
 */
function measurements(cityId) {
    if (cityId === void 0) { cityId = "gXTDkEBCX9BBKe5wc"; }
    return __awaiter(this, void 0, void 0, function () {
        var _a, _b, err_6;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _c.trys.push([0, 2, , 3]);
                    _b = (_a = JSON).parse;
                    return [4 /*yield*/, got_1["default"].get("https://website-api.airvisual.com/v1/cities/" + cityId + "/measurements?units.temperature=celsius&units.distance=kilometer&AQI=US&language=en", {
                            headers: {
                                accept: "application/json, text/plain, */*",
                                "accept-encoding": "gzip, deflate, br",
                                "accept-language": "en-US;q=0.8,en;q=0.7",
                                "content-type": "application/json",
                                // cookie:
                                //   'user_preferences={"coordinates":{"latitude":45.5037,"longitude":11.412},"timezone":"Europe/Rome","country":{"id":"wS4BTBZsKwcpavTvr","name":"Italy"},"city":{"id":"5bc8219541fdcdf1939db899","name":"Montecchio Maggiore-Alte Ceccato"},"units":{"distance":"kilometer","temperature":"celsius"},"AQI":"US"}',
                                origin: "https://www.airvisual.com",
                                "sec-fetch-mode": "cors",
                                "sec-fetch-site": "same-site",
                                "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36"
                            }
                        })];
                case 1: return [2 /*return*/, _b.apply(_a, [(_c.sent()).body])];
                case 2:
                    err_6 = _c.sent();
                    console.error("==> Error: " + err_6.message);
                    return [2 /*return*/, null];
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.measurements = measurements;
/**
 * Cerca tutte le stazioni in una città.
 * @param cityId ID della città.
 */
function stationsByCityId(cityId) {
    if (cityId === void 0) { cityId = "gXTDkEBCX9BBKe5wc"; }
    return __awaiter(this, void 0, void 0, function () {
        var _a, _b, err_7;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _c.trys.push([0, 2, , 3]);
                    _b = (_a = JSON).parse;
                    return [4 /*yield*/, got_1["default"].get("https://website-api.airvisual.com/v1/stations/by/cityID/" + cityId + "?units.temperature=celsius&units.distance=kilometer&AQI=US&language=en", {
                            headers: {
                                accept: "application/json, text/plain, */*",
                                "accept-encoding": "gzip, deflate, br",
                                "accept-language": "en-US;q=0.8,en;q=0.7",
                                origin: "https://www.airvisual.com",
                                "sec-fetch-mode": "cors",
                                "sec-fetch-site": "same-site",
                                "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36"
                            }
                        })];
                case 1: return [2 /*return*/, _b.apply(_a, [(_c.sent()).body])];
                case 2:
                    err_7 = _c.sent();
                    console.error("==> Error: " + err_7.message);
                    return [2 /*return*/, null];
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.stationsByCityId = stationsByCityId;
/**
 * Ritorna le stazioni della città ordinate per AQI (Air Quality Index).
 * @param cityId ID della città.
 */
function cityRankings(cityId) {
    if (cityId === void 0) { cityId = "gXTDkEBCX9BBKe5wc"; }
    return __awaiter(this, void 0, void 0, function () {
        var _a, _b, err_8;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _c.trys.push([0, 2, , 3]);
                    _b = (_a = JSON).parse;
                    return [4 /*yield*/, got_1["default"].get("https://website-api.airvisual.com/v1/cities/" + cityId + "/rankings?units.temperature=celsius&units.distance=kilometer&AQI=US&language=en", {
                            headers: {
                                accept: "application/json, text/plain, */*",
                                "accept-encoding": "gzip, deflate, br",
                                "accept-language": "en-US;q=0.8,en;q=0.7",
                                "content-type": "application/json",
                                // 'cookie': 'user_preferences={"coordinates":{"latitude":45.5037,"longitude":11.412},"timezone":"Europe/Rome","country":{"id":"wS4BTBZsKwcpavTvr","name":"Italy"},"city":{"id":"5bc8219541fdcdf1939db899","name":"Montecchio Maggiore-Alte Ceccato"},"units":{"distance":"kilometer","temperature":"celsius"},"AQI":"US"}',
                                origin: "https://www.airvisual.com",
                                referer: "https://www.airvisual.com/usa/new-york",
                                "sec-fetch-mode": "cors",
                                "sec-fetch-site": "same-site",
                                "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36"
                            }
                        })];
                case 1: return [2 /*return*/, _b.apply(_a, [(_c.sent()).body])];
                case 2:
                    err_8 = _c.sent();
                    console.error("==> Error: " + err_8.message);
                    return [2 /*return*/, null];
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.cityRankings = cityRankings;
/**
 * Ritorna lo CityId dela località specificata.
 * @param cityRoute Route della località.
 */
function getCityId(cityRoute) {
    if (cityRoute === void 0) { cityRoute = "/usa/new-york"; }
    return __awaiter(this, void 0, void 0, function () {
        var re, _a, _b, err_9;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    re = /^\/(?:[^\/]+\/)*[^\/]+$/gm;
                    if (!re.test(cityRoute)) {
                        console.error("==> Error: argument cityRoute " + cityRoute + " not valid. Must be in the form " + re);
                        return [2 /*return*/, null];
                    }
                    _c.label = 1;
                case 1:
                    _c.trys.push([1, 3, , 4]);
                    _b = (_a = JSON).parse;
                    return [4 /*yield*/, got_1["default"].get("https://website-api.airvisual.com/v1/routes" + cityRoute, {
                            headers: {
                                accept: "application/json, text/plain, */*",
                                "accept-encoding": "gzip, deflate, br",
                                "accept-language": "en-US;q=0.8,en;q=0.7",
                                origin: "https://www.airvisual.com",
                                "sec-fetch-mode": "cors",
                                "sec-fetch-site": "same-site",
                                "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36"
                            }
                        })];
                case 2: return [2 /*return*/, _b.apply(_a, [(_c.sent()).body])];
                case 3:
                    err_9 = _c.sent();
                    console.error("==> Error: " + err_9.message);
                    return [2 /*return*/, null];
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.getCityId = getCityId;
/**
 * Cerca stazioni, città, contributori, pubblicazioni.
 * @param query La query di ricerca.
 */
function search(query) {
    if (query === void 0) { query = "new york"; }
    return __awaiter(this, void 0, void 0, function () {
        var _a, _b, err_10;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _c.trys.push([0, 2, , 3]);
                    _b = (_a = JSON).parse;
                    return [4 /*yield*/, got_1["default"].get("https://website-api.airvisual.com/v1/search?q=" + query + "&units.temperature=celsius&units.distance=kilometer&AQI=US&language=en", {
                            headers: {
                                accept: "application/json, text/plain, */*",
                                "accept-encoding": "gzip, deflate, br",
                                "accept-language": "en-US;q=0.8,en;q=0.7",
                                origin: "https://www.airvisual.com",
                                "sec-fetch-mode": "cors",
                                "sec-fetch-site": "same-site",
                                "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36"
                            }
                        })];
                case 1: return [2 /*return*/, _b.apply(_a, [(_c.sent()).body])];
                case 2:
                    err_10 = _c.sent();
                    console.error("==> Error: " + err_10.message);
                    return [2 /*return*/, null];
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.search = search;
/**
 * Ritorna le stazioni più vicine all'interno della bounding box.
 * @param bbox Bounding box: oggetto che serve a delimitare un area geografica.
 */
function stationsInArea(bbox) {
    if (bbox === void 0) { bbox = {
        minLongitude: -74.23585270279935,
        minLatitude: 40.49794521493587,
        maxLongitude: -73.62133929720065,
        maxLatitude: 40.890279209228346
    }; }
    return __awaiter(this, void 0, void 0, function () {
        var bboxStr, _a, _b, err_11;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    bboxStr = Object.values(bbox).join(",");
                    _c.label = 1;
                case 1:
                    _c.trys.push([1, 3, , 4]);
                    _b = (_a = JSON).parse;
                    return [4 /*yield*/, got_1["default"].get("https://website-api.airvisual.com/v1/places/map?bbox=" + bboxStr + "&units.temperature=celsius&units.distance=kilometer&AQI=US&language=en", {
                            headers: {
                                accept: "application/json, text/plain, */*",
                                "accept-encoding": "gzip, deflate, br",
                                "accept-language": "en-US;q=0.8,en;q=0.7",
                                origin: "https://www.airvisual.com",
                                "sec-fetch-mode": "cors",
                                "sec-fetch-site": "same-site",
                                "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36"
                            }
                        })];
                case 2: return [2 /*return*/, _b.apply(_a, [(_c.sent()).body])];
                case 3:
                    err_11 = _c.sent();
                    console.error("==> Error: " + err_11.message);
                    return [2 /*return*/, null];
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.stationsInArea = stationsInArea;
/**
 * Ritorna i dettagli sulla città della stazione.
 * @param stationId ID della stazione.
 */
function city(stationId) {
    if (stationId === void 0) { stationId = "5c652852eff5bf47a1cac6ac"; }
    return __awaiter(this, void 0, void 0, function () {
        var _a, _b, err_12;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _c.trys.push([0, 2, , 3]);
                    _b = (_a = JSON).parse;
                    return [4 /*yield*/, got_1["default"].get("https://website-api.airvisual.com/v1/stations/" + stationId + "?units.temperature=celsius&units.distance=kilometer&AQI=US&language=en", {
                            headers: {
                                accept: "application/json, text/plain, */*",
                                "accept-encoding": "gzip, deflate, br",
                                "accept-language": "en-US;q=0.8,en;q=0.7",
                                // cookie:
                                //   'user_preferences={"coordinates":{"latitude":45.5037,"longitude":11.412},"timezone":"Europe/Rome","country":{"id":"wS4BTBZsKwcpavTvr","name":"Italy"},"city":{"id":"5bc8219541fdcdf1939db899","name":"Montecchio Maggiore-Alte Ceccato"},"units":{"distance":"kilometer","temperature":"celsius"},"AQI":"US"}',
                                origin: "https://www.airvisual.com",
                                referer: "https://www.airvisual.com/world-air-quality",
                                "sec-fetch-mode": "cors",
                                "sec-fetch-site": "same-site",
                                "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36"
                            }
                        })];
                case 1: return [2 /*return*/, _b.apply(_a, [(_c.sent()).body])];
                case 2:
                    err_12 = _c.sent();
                    console.error("==> Error: " + err_12.message);
                    return [2 /*return*/, null];
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.city = city;
/**
 * Ritorna un array delle città più inquinate.
 */
function mostPollutedCities() {
    return __awaiter(this, void 0, void 0, function () {
        var _a, _b, err_13;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _c.trys.push([0, 2, , 3]);
                    _b = (_a = JSON).parse;
                    return [4 /*yield*/, got_1["default"].get("https://website-api.airvisual.com/v1/countries/rankings?display=full&perPage=7&AQI=US&units.distance=kilometer&units.temperature=celsius", {
                            headers: {
                                accept: "*/*",
                                "accept-encoding": "gzip, deflate, br",
                                "accept-language": "it-IT,it;q=0.9,en-US;q=0.8,en;q=0.7",
                                origin: "https://www.airvisual.com",
                                referer: "https://www.airvisual.com/earth?nav",
                                "sec-fetch-mode": "cors",
                                "sec-fetch-site": "same-site",
                                "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36"
                            }
                        })];
                case 1: return [2 /*return*/, _b.apply(_a, [(_c.sent()).body])];
                case 2:
                    err_13 = _c.sent();
                    console.error("==> Error: " + err_13.message);
                    return [2 /*return*/, null];
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.mostPollutedCities = mostPollutedCities;
/**
 * Ritorna una lista di tutte le città presenti nel db.
 */
function allCities() {
    return __awaiter(this, void 0, void 0, function () {
        var _a, _b, err_14;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _c.trys.push([0, 2, , 3]);
                    _b = (_a = JSON).parse;
                    return [4 /*yield*/, got_1["default"].get("https://website-api.airvisual.com/v1/places/map?bbox=-180,-90,180,90&units.temperature=celsius&units.distance=kilometer&AQI=US&language=en", {
                            headers: {
                                accept: "application/json, text/plain, */*",
                                "accept-encoding": "gzip, deflate, br",
                                "accept-language": "en-US;q=0.8,en;q=0.7",
                                origin: "https://www.airvisual.com",
                                referer: "https://www.airvisual.com/air-quality-map",
                                "sec-fetch-mode": "cors",
                                "sec-fetch-site": "same-site",
                                "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36"
                            }
                        })];
                case 1: return [2 /*return*/, _b.apply(_a, [(_c.sent()).body])];
                case 2:
                    err_14 = _c.sent();
                    console.error("==> Error: " + err_14.message);
                    return [2 /*return*/, null];
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.allCities = allCities;
/**
 * Calculates the distance from p1 to p2.
 * @param param0 Points to calculate the distance of.
 */
function euclidianDistance(_a) {
    var p1 = _a.p1, p2 = _a.p2;
    return Math.sqrt(Math.pow(p1.x - p1.y, 2) + Math.pow(p2.x - p2.y, 2));
}
/**
 * Finds the nearest city to the given coordinates.
 * @param param0 Coordinates.
 */
function getNearestCity(_a) {
    var latitude = _a.latitude, longitude = _a.longitude;
    var _b, _c;
    return __awaiter(this, void 0, void 0, function () {
        var cities;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0: return [4 /*yield*/, allCities()];
                case 1:
                    cities = _d.sent();
                    return [2 /*return*/, (_c = (_b = cities) === null || _b === void 0 ? void 0 : _b.sort(function (a, b) {
                            return euclidianDistance({
                                p1: { x: a.coordinates.latitude, y: latitude },
                                p2: { x: a.coordinates.longitude, y: longitude }
                            }) <
                                euclidianDistance({
                                    p1: { x: b.coordinates.latitude, y: latitude },
                                    p2: { x: b.coordinates.longitude, y: longitude }
                                })
                                ? -1
                                : 1;
                        })[0], (_c !== null && _c !== void 0 ? _c : null))];
            }
        });
    });
}
exports.getNearestCity = getNearestCity;
