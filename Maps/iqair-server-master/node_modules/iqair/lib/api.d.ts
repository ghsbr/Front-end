import { City } from "./models/city";
import { PollutedCity } from "./models/polluted-city";
import { CityDetailed } from "./models/city-detailed";
import { SearchResults } from "./models/search-results";
import { CityId } from "./models/city-id";
import { CityRankingsCity } from "./models/city-rankings-city";
import { Measurements } from "./models/measurements";
import { LastYearPollutedCountry } from "./models/last-year-polluted-country";
import { LastYearPollutedCitiesData } from "./models/last-year-polluted-city";
import { LastYearPollutedCityFromGen } from "./models/last-year-polluted-city-from-gen";
import { Top3ByCountryCountry } from "./models/top-3-by-country-country";
/**
 * Ritorna le città più inquinate dell'anno scorso, 50 alla volta.
 * @param page Pagina da cui far partire il generatore asincorno.
 */
export declare function lastYearMostPollutedCities(page?: number): AsyncGenerator<LastYearPollutedCityFromGen[] | null>;
/**
 * Ritorna le città più inquinate dell'anno scorso (si aggiorna ogni anno
 * circa).
 */
export declare function lastYearMostPollutedAllCities(): Promise<LastYearPollutedCitiesData | null>;
/**
 * Ritorna gli stati più inquinati dell'anno scorso (si aggiorna ogni anno
 * circa).
 */
export declare function lastYearMostPollutedCountries(): Promise<LastYearPollutedCountry[] | null>;
/**
 * Generatore asincrono che ad ogni iterazione restituisce 50 città inquinate.
 * @param page Pagina iniziale da cui far partire il generatore asincrono.
 */
export declare function rankings(page?: number): AsyncGenerator<PollutedCity[] | null>;
/**
 * Ritorna le 3 città più inquinate del paese.
 * @param countryId ID del paese.
 */
export declare function top3ByCountry(countryId?: string): Promise<Top3ByCountryCountry[] | null>;
/**
 * Ritorna misurazioni effettuate sulla città, aggiornate in tempo reale.
 * @param cityId ID della città.
 */
export declare function measurements(cityId?: string): Promise<Measurements | null>;
/**
 * Cerca tutte le stazioni in una città.
 * @param cityId ID della città.
 */
export declare function stationsByCityId(cityId?: string): Promise<any>;
/**
 * Ritorna le stazioni della città ordinate per AQI (Air Quality Index).
 * @param cityId ID della città.
 */
export declare function cityRankings(cityId?: string): Promise<CityRankingsCity[] | null>;
/**
 * Ritorna lo CityId dela località specificata.
 * @param cityRoute Route della località.
 */
export declare function getCityId(cityRoute?: string): Promise<CityId | null>;
/**
 * Cerca stazioni, città, contributori, pubblicazioni.
 * @param query La query di ricerca.
 */
export declare function search(query?: string): Promise<SearchResults | null>;
/**
 * Ritorna le stazioni più vicine all'interno della bounding box.
 * @param bbox Bounding box: oggetto che serve a delimitare un area geografica.
 */
export declare function stationsInArea(bbox?: {
    minLongitude: number;
    minLatitude: number;
    maxLongitude: number;
    maxLatitude: number;
}): Promise<City[] | null>;
/**
 * Ritorna i dettagli sulla città della stazione.
 * @param stationId ID della stazione.
 */
export declare function city(stationId?: string): Promise<CityDetailed | null>;
/**
 * Ritorna un array delle città più inquinate.
 */
export declare function mostPollutedCities(): Promise<PollutedCity[] | null>;
/**
 * Ritorna una lista di tutte le città presenti nel db.
 */
export declare function allCities(): Promise<City[] | null>;
/**
 * Finds the nearest city to the given coordinates.
 * @param param0 Coordinates.
 */
export declare function getNearestCity({ latitude, longitude, }: {
    latitude: number;
    longitude: number;
}): Promise<City | null>;
